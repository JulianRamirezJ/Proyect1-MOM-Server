# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import config_pb2 as config__pb2


class TopicServiceStub(object):
    """Topics
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/TopicService/create',
                request_serializer=config__pb2.TopicRequest.SerializeToString,
                response_deserializer=config__pb2.TopicResponse.FromString,
                )
        self.delete = channel.unary_unary(
                '/TopicService/delete',
                request_serializer=config__pb2.TopicRequest.SerializeToString,
                response_deserializer=config__pb2.TopicResponse.FromString,
                )
        self.listTopics = channel.unary_unary(
                '/TopicService/listTopics',
                request_serializer=config__pb2.Empty.SerializeToString,
                response_deserializer=config__pb2.TopicResponseList.FromString,
                )
        self.subscribeTopic = channel.unary_unary(
                '/TopicService/subscribeTopic',
                request_serializer=config__pb2.TopicRequest.SerializeToString,
                response_deserializer=config__pb2.TopicResponse.FromString,
                )
        self.publishTopic = channel.unary_unary(
                '/TopicService/publishTopic',
                request_serializer=config__pb2.TopicRequestMessage.SerializeToString,
                response_deserializer=config__pb2.TopicResponse.FromString,
                )
        self.consumeTopic = channel.unary_unary(
                '/TopicService/consumeTopic',
                request_serializer=config__pb2.TopicRequest.SerializeToString,
                response_deserializer=config__pb2.TopicResponseMessage.FromString,
                )


class TopicServiceServicer(object):
    """Topics
    """

    def create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listTopics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeTopic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def publishTopic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def consumeTopic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TopicServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=config__pb2.TopicRequest.FromString,
                    response_serializer=config__pb2.TopicResponse.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=config__pb2.TopicRequest.FromString,
                    response_serializer=config__pb2.TopicResponse.SerializeToString,
            ),
            'listTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.listTopics,
                    request_deserializer=config__pb2.Empty.FromString,
                    response_serializer=config__pb2.TopicResponseList.SerializeToString,
            ),
            'subscribeTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeTopic,
                    request_deserializer=config__pb2.TopicRequest.FromString,
                    response_serializer=config__pb2.TopicResponse.SerializeToString,
            ),
            'publishTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.publishTopic,
                    request_deserializer=config__pb2.TopicRequestMessage.FromString,
                    response_serializer=config__pb2.TopicResponse.SerializeToString,
            ),
            'consumeTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.consumeTopic,
                    request_deserializer=config__pb2.TopicRequest.FromString,
                    response_serializer=config__pb2.TopicResponseMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TopicService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TopicService(object):
    """Topics
    """

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TopicService/create',
            config__pb2.TopicRequest.SerializeToString,
            config__pb2.TopicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TopicService/delete',
            config__pb2.TopicRequest.SerializeToString,
            config__pb2.TopicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TopicService/listTopics',
            config__pb2.Empty.SerializeToString,
            config__pb2.TopicResponseList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TopicService/subscribeTopic',
            config__pb2.TopicRequest.SerializeToString,
            config__pb2.TopicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def publishTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TopicService/publishTopic',
            config__pb2.TopicRequestMessage.SerializeToString,
            config__pb2.TopicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def consumeTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TopicService/consumeTopic',
            config__pb2.TopicRequest.SerializeToString,
            config__pb2.TopicResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class QueueServiceStub(object):
    """Queues
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/QueueService/create',
                request_serializer=config__pb2.QueueRequest.SerializeToString,
                response_deserializer=config__pb2.QueueResponse.FromString,
                )
        self.delete = channel.unary_unary(
                '/QueueService/delete',
                request_serializer=config__pb2.QueueRequest.SerializeToString,
                response_deserializer=config__pb2.QueueResponse.FromString,
                )
        self.listQueues = channel.unary_unary(
                '/QueueService/listQueues',
                request_serializer=config__pb2.Empty.SerializeToString,
                response_deserializer=config__pb2.QueueResponseList.FromString,
                )
        self.subscribeQueue = channel.unary_unary(
                '/QueueService/subscribeQueue',
                request_serializer=config__pb2.QueueRequest.SerializeToString,
                response_deserializer=config__pb2.QueueResponse.FromString,
                )
        self.publishQueue = channel.unary_unary(
                '/QueueService/publishQueue',
                request_serializer=config__pb2.QueueRequestMessage.SerializeToString,
                response_deserializer=config__pb2.QueueResponse.FromString,
                )
        self.consumeQueue = channel.unary_unary(
                '/QueueService/consumeQueue',
                request_serializer=config__pb2.QueueRequest.SerializeToString,
                response_deserializer=config__pb2.QueueResponseMessage.FromString,
                )


class QueueServiceServicer(object):
    """Queues
    """

    def create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listQueues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def publishQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def consumeQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueueServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=config__pb2.QueueRequest.FromString,
                    response_serializer=config__pb2.QueueResponse.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=config__pb2.QueueRequest.FromString,
                    response_serializer=config__pb2.QueueResponse.SerializeToString,
            ),
            'listQueues': grpc.unary_unary_rpc_method_handler(
                    servicer.listQueues,
                    request_deserializer=config__pb2.Empty.FromString,
                    response_serializer=config__pb2.QueueResponseList.SerializeToString,
            ),
            'subscribeQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribeQueue,
                    request_deserializer=config__pb2.QueueRequest.FromString,
                    response_serializer=config__pb2.QueueResponse.SerializeToString,
            ),
            'publishQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.publishQueue,
                    request_deserializer=config__pb2.QueueRequestMessage.FromString,
                    response_serializer=config__pb2.QueueResponse.SerializeToString,
            ),
            'consumeQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.consumeQueue,
                    request_deserializer=config__pb2.QueueRequest.FromString,
                    response_serializer=config__pb2.QueueResponseMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'QueueService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QueueService(object):
    """Queues
    """

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueueService/create',
            config__pb2.QueueRequest.SerializeToString,
            config__pb2.QueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueueService/delete',
            config__pb2.QueueRequest.SerializeToString,
            config__pb2.QueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listQueues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueueService/listQueues',
            config__pb2.Empty.SerializeToString,
            config__pb2.QueueResponseList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribeQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueueService/subscribeQueue',
            config__pb2.QueueRequest.SerializeToString,
            config__pb2.QueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def publishQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueueService/publishQueue',
            config__pb2.QueueRequestMessage.SerializeToString,
            config__pb2.QueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def consumeQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueueService/consumeQueue',
            config__pb2.QueueRequest.SerializeToString,
            config__pb2.QueueResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
