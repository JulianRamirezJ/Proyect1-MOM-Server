# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import config.config_pb2 as config__pb2


class UserServiceStub(object):
    """Users
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/UserService/Create',
                request_serializer=config__pb2.Null.SerializeToString,
                response_deserializer=config__pb2.UserResponse.FromString,
                )


class UserServiceServicer(object):
    """Users
    """

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=config__pb2.Null.FromString,
                    response_serializer=config__pb2.UserResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """Users
    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UserService/Create',
            config__pb2.Null.SerializeToString,
            config__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TopicServiceStub(object):
    """Topics
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/TopicService/Create',
                request_serializer=config__pb2.TopicRequest.SerializeToString,
                response_deserializer=config__pb2.TopicResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/TopicService/Delete',
                request_serializer=config__pb2.TopicRequest.SerializeToString,
                response_deserializer=config__pb2.TopicResponse.FromString,
                )
        self.ListTopics = channel.unary_unary(
                '/TopicService/ListTopics',
                request_serializer=config__pb2.TopicRequest.SerializeToString,
                response_deserializer=config__pb2.TopicResponseList.FromString,
                )
        self.SubscribeTopic = channel.unary_unary(
                '/TopicService/SubscribeTopic',
                request_serializer=config__pb2.TopicRequest.SerializeToString,
                response_deserializer=config__pb2.TopicResponse.FromString,
                )
        self.PublishTopic = channel.unary_unary(
                '/TopicService/PublishTopic',
                request_serializer=config__pb2.TopicRequestMessage.SerializeToString,
                response_deserializer=config__pb2.TopicResponse.FromString,
                )
        self.ConsumeTopic = channel.unary_unary(
                '/TopicService/ConsumeTopic',
                request_serializer=config__pb2.TopicRequest.SerializeToString,
                response_deserializer=config__pb2.TopicResponseMessage.FromString,
                )


class TopicServiceServicer(object):
    """Topics
    """

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTopics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeTopic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishTopic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConsumeTopic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TopicServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=config__pb2.TopicRequest.FromString,
                    response_serializer=config__pb2.TopicResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=config__pb2.TopicRequest.FromString,
                    response_serializer=config__pb2.TopicResponse.SerializeToString,
            ),
            'ListTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTopics,
                    request_deserializer=config__pb2.TopicRequest.FromString,
                    response_serializer=config__pb2.TopicResponseList.SerializeToString,
            ),
            'SubscribeTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeTopic,
                    request_deserializer=config__pb2.TopicRequest.FromString,
                    response_serializer=config__pb2.TopicResponse.SerializeToString,
            ),
            'PublishTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishTopic,
                    request_deserializer=config__pb2.TopicRequestMessage.FromString,
                    response_serializer=config__pb2.TopicResponse.SerializeToString,
            ),
            'ConsumeTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.ConsumeTopic,
                    request_deserializer=config__pb2.TopicRequest.FromString,
                    response_serializer=config__pb2.TopicResponseMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TopicService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TopicService(object):
    """Topics
    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TopicService/Create',
            config__pb2.TopicRequest.SerializeToString,
            config__pb2.TopicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TopicService/Delete',
            config__pb2.TopicRequest.SerializeToString,
            config__pb2.TopicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TopicService/ListTopics',
            config__pb2.TopicRequest.SerializeToString,
            config__pb2.TopicResponseList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TopicService/SubscribeTopic',
            config__pb2.TopicRequest.SerializeToString,
            config__pb2.TopicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TopicService/PublishTopic',
            config__pb2.TopicRequestMessage.SerializeToString,
            config__pb2.TopicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConsumeTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TopicService/ConsumeTopic',
            config__pb2.TopicRequest.SerializeToString,
            config__pb2.TopicResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class QueueServiceStub(object):
    """Queues
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/QueueService/Create',
                request_serializer=config__pb2.QueueRequest.SerializeToString,
                response_deserializer=config__pb2.QueueResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/QueueService/Delete',
                request_serializer=config__pb2.QueueRequest.SerializeToString,
                response_deserializer=config__pb2.QueueResponse.FromString,
                )
        self.ListQueues = channel.unary_unary(
                '/QueueService/ListQueues',
                request_serializer=config__pb2.QueueRequest.SerializeToString,
                response_deserializer=config__pb2.QueueResponseList.FromString,
                )
        self.SubscribeQueue = channel.unary_unary(
                '/QueueService/SubscribeQueue',
                request_serializer=config__pb2.QueueRequest.SerializeToString,
                response_deserializer=config__pb2.QueueResponse.FromString,
                )
        self.PublishQueue = channel.unary_unary(
                '/QueueService/PublishQueue',
                request_serializer=config__pb2.QueueRequestMessage.SerializeToString,
                response_deserializer=config__pb2.QueueResponse.FromString,
                )
        self.ConsumeQueue = channel.unary_unary(
                '/QueueService/ConsumeQueue',
                request_serializer=config__pb2.QueueRequest.SerializeToString,
                response_deserializer=config__pb2.QueueResponseMessage.FromString,
                )


class QueueServiceServicer(object):
    """Queues
    """

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListQueues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConsumeQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueueServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=config__pb2.QueueRequest.FromString,
                    response_serializer=config__pb2.QueueResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=config__pb2.QueueRequest.FromString,
                    response_serializer=config__pb2.QueueResponse.SerializeToString,
            ),
            'ListQueues': grpc.unary_unary_rpc_method_handler(
                    servicer.ListQueues,
                    request_deserializer=config__pb2.QueueRequest.FromString,
                    response_serializer=config__pb2.QueueResponseList.SerializeToString,
            ),
            'SubscribeQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeQueue,
                    request_deserializer=config__pb2.QueueRequest.FromString,
                    response_serializer=config__pb2.QueueResponse.SerializeToString,
            ),
            'PublishQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishQueue,
                    request_deserializer=config__pb2.QueueRequestMessage.FromString,
                    response_serializer=config__pb2.QueueResponse.SerializeToString,
            ),
            'ConsumeQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.ConsumeQueue,
                    request_deserializer=config__pb2.QueueRequest.FromString,
                    response_serializer=config__pb2.QueueResponseMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'QueueService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QueueService(object):
    """Queues
    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueueService/Create',
            config__pb2.QueueRequest.SerializeToString,
            config__pb2.QueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueueService/Delete',
            config__pb2.QueueRequest.SerializeToString,
            config__pb2.QueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListQueues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueueService/ListQueues',
            config__pb2.QueueRequest.SerializeToString,
            config__pb2.QueueResponseList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueueService/SubscribeQueue',
            config__pb2.QueueRequest.SerializeToString,
            config__pb2.QueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueueService/PublishQueue',
            config__pb2.QueueRequestMessage.SerializeToString,
            config__pb2.QueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConsumeQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueueService/ConsumeQueue',
            config__pb2.QueueRequest.SerializeToString,
            config__pb2.QueueResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
